import joblib
from pathlib import Path
from sklearn.ensemble import RandomForestClassifier # Example model
from ...core.logger import logger

# ... inside the MLVulnerabilityPrediction class ...

def __init__(self, scheduler, memory_pool):
    super().__init__(scheduler, memory_pool)
    self.plugin_name = "ML Vulnerability Prediction"
    self.model_path = Path(__file__).parent.parent.parent / 'data' / 'models' / 'vulnerability_classifier.joblib'
    self.model = self._load_model()

def _load_model(self):
    """Safely loads a pre-trained model using joblib."""
    if not self.model_path.exists():
        logger.warning("ML model not found. Prediction will be disabled.")
        # Return a default, untrained model as a fallback
        return RandomForestClassifier()

    try:
        # joblib is the recommended, secure way to load scikit-learn models.
        # It is resistant to the arbitrary code execution vulnerabilities
        # found in libraries like pickle.
        model = joblib.load(self.model_path)
        logger.info("Successfully loaded ML vulnerability prediction model.")
        return model
    except Exception as e:
        logger.error(f"Failed to load ML model from {self.model_path}: {e}")
        return RandomForestClassifier()

def _save_model(self, model):
    """Safely saves a trained model using joblib."""
    try:
        # Ensure the directory exists
        self.model_path.parent.mkdir(parents=True, exist_ok=True)
        joblib.dump(model, self.model_path)
        logger.info(f"Successfully saved ML model to {self.model_path}")
    except Exception as e:
        logger.error(f"Failed to save ML model: {e}")

def train_and_save_new_model(self, features, labels):
    """Example training function."""
    logger.info("Training new ML model...")
    # This is a placeholder for your actual training logic
    new_model = RandomForestClassifier()
    new_model.fit(features, labels)
    self._save_model(new_model)
    self.model = new_model
